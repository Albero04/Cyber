Soluzione
Viene dato in particolare un file sumiti binario senza estensione, come al solito da analizzare senza eseguire
nessuna patch. L’esecuzione chiede semplicemente di inserire un nome e poi termina.
Controllando il file con radare2, possiamo notare diverse cose:
- decrypt, che esegue un loop e una XOR tra variabili in memoria per decriptare la flag
- create_panino, che chiama time, srand e controlla lo stack (canary), ritornando una divisione per
9999
- check_sandwitch, che controlla una serie i caratteri in successione, affinché siano almeno 8 e
compaia la stringa F4nTa151A
In IDA si vede subito che l’input che vogliamo è SumitiLover1234:
continuando l'esecuzione viene eseguita la funzione check_sandwitch che accetta come input una stringa
lunga 8 e controlla che per ogni carattere della stringa corrisponde al codice ascii.
Utilizzando in alternativa a prima la funzione chr di python e riordinando è possibile ottenere
la stringa richiesta
- print(chr(70),chr(52),chr(110),chr(84),chr(97),chr(53),chr(49),chr(65))
2) input : F4nTa51A
Il file è un eseguibile PIE, pertanto è in atto una rilocazione dinamica degli indirizzi.
Viene richiesto un pin casuale che poi viene eseguito in XOR e diviso come detto sopra, usando gdb è
possibile creare un breakpoint al momento dell'assegnazione alla variabile panino
mov [rbp+var_44], eax
Si deve eseguire e fallire il programma almeno una volta. Poi avremo gli indirizzo con 0x0000555555555.
Metteremo un break l'istruzione subito dopo la call create_panino, come segue: (in mov     [rbp+var_44], eax)
Sul terminale quindi si inseriscano, le seguenti istruzioni (considerando di stampare “eax” perché abbiamo
fatto la “mov”):
gdb sumiti
b* 0x0000555555555683
r
SumitiLover1234
F4nTa51A
print $eax
convertire da hex in decimale (nel mio caso è stato 0x3a0 in decimale 0928)
c
Inserire il pin
quindi ottenere la flag : SPRITZ{TwO_EuRo_PleAs3}
